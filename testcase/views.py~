#!/usr/bin/python3 
# coding=UTF-8

from django.shortcuts import render
from django.http import HttpResponse
from django.views import View

import shlex
import subprocess as sub

import time
import logging
import sys


from etaprogress.progress import ProgressBar

import acbbs
from acbbs.drivers.ate.ClimCham import ClimCham
from acbbs.testcases.rxExcursion import rxExcursion
from acbbs.testcases.txExcursion import txExcursion
from acbbs.testcases.txIM3Measurement import txIM3Measurement
from acbbs.tools.configurationFile import configurationFile
from acbbs import __version__

from .models import testcaseModel
from .forms import testcaseForm

from ..config import database


command_line_python = 'python3 acbbs-scheduler.py --simulate --channel 1 -d configuration_TAPV3.0 -m test --noclimchamb >> schedule.log'

TESTCASES = {
    "rxExcursion":rxExcursion,
    "txExcursion":txExcursion,
    "txIM3Measurement":txIM3Measurement
	}


class Caracterisation(View):
	config={}
	
	
	# Home renvoie le template home de l'application testcase
	def home(self,request):
		#envoie la liste des configurations de la database 
		
		return render(request,'testcase/home.html')
	
					
	# Recupère le formulaire scheduler  
	def get_testcaseForm(self,request):
		if request.method == 'POST':
			form = testcaseForm(request.POST)
			print(form.is_valid())
			if form.is_valid():																     # si le formulaire est valide
				form.save()   																	 # enregistre le formulaire sur la db
				print("debug: name caracterization started",form.cleaned_data['testcase_nameCarac'])
				print("formulare input: ", form.cleaned_data)
				for i in testcaseModel.objects.all(): 											 # verifie que le testcase n'existe pas déjà
					if str(i) == form.cleaned_data['testcase_nameCarac']: 						 # si il existe
						testcaseModel.objects.filter(testcase_nameCarac=str(i)).delete()		 # suppression des doublets
						form.save() 
			else:      																		     # si le formulaire n'est pas valide
				print('debug: formulare is not valide')
		else:
			print("ERROR POST:",request)
		self.config=dict(request.POST)
		return form.is_valid()
		
				
	# Lance le script acbbs-schedule.py dans le dossier /etc/acbbs/
	def schedule_start(self,request):
		#get configuration
		if self.get_testcaseForm(request):
			list_conf = self.config
			#print date and version
			print("ACBBS V{} -- {}".format(__version__, time.strftime("%Y-%m-%d %H:%M:%S")))					# convertion d'une queryset en dictionnaire 
			conf = configurationFile(file = "scheduler", taphw = list_conf["testcase_configFile"])              # args.dut fichier de configuration
			schConf = conf.getConfiguration()
			if list_conf["testcase_simulation"]:
				simulate = True
			else:
				simulate = False
			try:
				dut_channel = str(list_conf["testcase_channel"]).split(",")   ## penser à chainer les channels quand on les entre en paramètres
				for i in range(0, len(dut_channel)):
					dut_channel[i] = int(dut_channel[i])
			except:
				print("Error parsing DUT channel")
				exit(0)
			#initialize climatic chamber
			if list_conf["testcase_climChamber"] is False:
				clim = ClimCham(simulate=simulate)
				clim.status = 1
			#start loops
			for temp in schConf["temperature"]:
				#set temperature and wait
				print("\n#########################")
				print("Launch TestCases at {0}C".format(temp))
				print("#########################\n")
				if list_conf["testcase_climChamber"] is False:
					print("Set climatic chamber at {0} C".format(temp))
					clim.tempConsigne = temp
					print("Waiting for {0} seconds".format(schConf["climChamberDelay"]))
					try:
						for remaining in range(schConf["climChamberDelay"], 0, -1):
							sys.stdout.write("\r")
							sys.stdout.write("{:2d} seconds remaining.".format(remaining)) 
							sys.stdout.flush()
							time.sleep(1)
					except KeyboardInterrupt:
						print("\n\nKeyboard Interrupt. Stop countdown....")
						clim.status = 0
						sys.exit(0)
					print("\n")
				threadTc_list = []
				for tc in schConf["tc2play"]:
					for conf_number in range (0, len(conf.getConfiguration(file=tc))):
						threadTc_list.append(TESTCASES[tc](temp=temp, simulate=simulate, conf=conf.getConfiguration(file=tc)[conf_number], comment=list_conf["testcase_nameCarac"], date=time.time(), channel=dut_channel))
				tmp_class = ""
				for threadTc in threadTc_list:
					if tmp_class != threadTc.__class__.__name__:
						conf_number = 0
						tmp_class = threadTc.__class__.__name__
					conf_number += 1
					print("Processing {0} -- Conf {1}/{2}".format(threadTc.__class__.__name__, conf_number, len(conf.getConfiguration(file=threadTc.__class__.__name__))))
					print(time.strftime("%Y-%m-%d %H:%M:%S"))
					bar = ProgressBar(threadTc.iterationsNumber, max_width=70)
					threadTc.tcInit()
					threadTc.start()
					i = threadTc.iteration
					try:
						while threadTc.is_alive():
							time.sleep(0.1)
							if threadTc.iteration != i:
								i = threadTc.iteration
								bar.numerator = i
								print (bar, end='\r')
								sys.stdout.flush()
						print("\n\n")
					except KeyboardInterrupt:
						print("\n\nKeyboard Interrupt Aborting....")
						threadTc.abort()
						threadTc.join()
						if list_conf["testcase_climChamber"] is False:
							clim.status = 0
						sys.exit(0)
			print("TestCases finished")
			if list_conf["testcase_climChamber"] is False:
				print("Switch off climatic chamber")
				clim.status = 0
			print(time.strftime("%Y-%m-%d %H:%M:%S"))
			exit(0)
		else:
			print("INPUT ERROR : all inputs are not filled ") #ERROR window message 
		return render(request,'testcase/home.html')
	    
	def schedule_stop(self,request):
		return render(request,'testcase/home.html')
		
